{"ast":null,"code":"var _jsxFileName = \"/var/www/html/rk_practica/src/containers/Clients/Clients.js\";\nimport React, { Component } from \"react\";\nimport Client from \"../../components/Client/Client\";\nimport Button from \"../../components/Button/Button\";\nimport Input from \"../../components/Input/Input\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Clients extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      clientes: null,\n      openModal: false,\n      controls: {\n        email: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"email\",\n            placeholder: \"Email\"\n          },\n          value: \"\",\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          touched: false\n        },\n        name: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"text\",\n            placeholder: \"Your First Name\"\n          },\n          value: \"\",\n          validation: {\n            required: true,\n            minLength: 3\n          },\n          valid: false,\n          touched: false\n        },\n        last_name: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"text\",\n            placeholder: \"Your Second Name\"\n          },\n          value: \"\",\n          validation: {\n            required: true,\n            minLength: 3\n          },\n          valid: false,\n          touched: false\n        },\n        phone_number: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"number\",\n            placeholder: \"Enter your phone number\"\n          },\n          value: \"\",\n          validation: {\n            required: true,\n            minLength: 9,\n            isNumber: true\n          },\n          valid: false,\n          touched: false\n        }\n      },\n      formIsValid: false\n    };\n\n    this.componentDidMount = () => {\n      fetch(\"http://localhost:3030/clients\").then(response => {\n        return response.json();\n      }).then(data => {\n        this.setState({\n          clientes: data\n        });\n      }).catch(err => {\n        console.log(err.message);\n      });\n    };\n\n    this.openModalHandler = (event, id) => {\n      if (!!id) {\n        console.log(id);\n      }\n\n      let openModal = this.state.openModal;\n      this.setState({\n        openModal: !openModal\n      });\n    };\n\n    this.closeModalHandler = () => {\n      this.setState({\n        openModal: false\n      });\n    };\n\n    this.checkValidaty = (value, rules) => {\n      let isValid = true;\n\n      if (rules.required) {\n        isValid = value.trim() !== \"\" && isValid;\n      }\n\n      if (rules.minLength) {\n        isValid = value.length >= rules.minLength && isValid;\n      }\n\n      if (rules.maxLength) {\n        isValid = value.length <= rules.maxLength && isValid;\n      }\n\n      if (rules.isEmail) {\n        const pattern = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;\n        isValid = pattern.test(value) && isValid;\n      }\n\n      if (rules.isNumber) {\n        isValid = !isNaN(rules.isNumber) && isValid;\n      }\n\n      return isValid;\n    };\n\n    this.addNewClientHandler = (event, id) => {\n      event.preventDefault();\n      console.log(id);\n      /*let formData = []\n      for(let formElement in this.state.controls){\n          formData[formElement] = this.state.controls[formElement]\n      }\n       const order = {\n          userData: formData\n      }\n      \n      let persons = [...this.state.clientes];\n       let newPerson = {\n        name: order.userData.name.value,\n        last_name:  order.userData.last_name.value,\n        email:  order.userData.email.value,\n        phone_number: order.userData.phone_number\n      };\n       fetch(\"http://localhost:3030/clients\", {\n        method: \"POST\",\n        headers: {\n          \"Content-type\": \"application/json; charset=UTF-8\", // Indicates the content\n        },\n        body: JSON.stringify(newPerson),\n      })\n        .then((response) => response.json())\n        .then((data) => {\n          persons.push(data);\n          this.setState({ clientes: persons,openModal: false });\n        })\n        .catch((err) => console.log(err));*/\n    };\n\n    this.editClientHandler = id => {\n      console.log(\"edit\", id);\n    };\n\n    this.removeClientHadler = id => {\n      let persons = [...this.state.clientes];\n      let personIndex = persons.findIndex(person => person.id === id);\n      persons.splice(personIndex, 1);\n      fetch(\"http://localhost:3030/clients/\" + id, {\n        method: \"DELETE\"\n      }).then(response => {\n        response.json();\n\n        if (response.status === 200) {\n          this.setState({\n            clientes: persons\n          });\n        }\n      }).catch(err => console.log(err));\n    };\n\n    this.inputChangedHandler = (event, controlName) => {\n      const updateControls = { ...this.state.controls,\n        [controlName]: { ...this.state.controls[controlName],\n          value: event.target.value,\n          valid: this.checkValidaty(event.target.value, this.state.controls[controlName].validation),\n          touched: true\n        }\n      };\n      this.setState({\n        controls: updateControls\n      });\n    };\n  }\n\n  render() {\n    let persons = \"\";\n    let itemsCount = 0;\n    let modal = \"\";\n\n    if (this.state.clientes) {\n      itemsCount = \"Total: \" + this.state.clientes.length + \" clientes\";\n      persons = this.state.clientes.map((person, index) => /*#__PURE__*/_jsxDEV(Client, {\n        number: index + 1,\n        name: person.name,\n        last_name: person.last_name,\n        email: person.email,\n        phone: person.phone_number,\n        clickedEdit: event => this.openModalHandler(event, person.id),\n        clickedRemove: this.removeClientHadler.bind(this, person.id)\n      }, person.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }, this));\n    }\n\n    if (this.state.openModal) {\n      const formElementsArray = [];\n\n      for (let key in this.state.controls) {\n        formElementsArray.push({\n          id: key,\n          config: this.state.controls[key]\n        });\n      }\n\n      const form = formElementsArray.map(formElement => /*#__PURE__*/_jsxDEV(Input, {\n        elementType: formElement.config.elementType,\n        elementConfig: formElement.config.elementConfig,\n        value: formElement.config.value,\n        invalid: !formElement.config.valid,\n        shouldValidate: formElement.config.validation,\n        touched: formElement.config.touched,\n        changed: event => this.inputChangedHandler(event, formElement.id)\n      }, formElement.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }, this));\n      modal = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: event => this.addNewClientHandler(event, null),\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"title\",\n            children: \"Nuevo Cliente\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 13\n          }, this), form, /*#__PURE__*/_jsxDEV(Button, {\n            btnType: \"Success\",\n            classes: \"green fullwidth\",\n            children: \"Crear Nuevo Cliente\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            btnType: \"Dismiss\",\n            classes: \"red fullwidth\",\n            clicked: this.closeModalHandler,\n            children: \"Cancelar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Clients\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row right\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          classes: \"green\",\n          clicked: event => this.openModalHandler(event),\n          children: \"Nuevo Cliente\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"list-items top\",\n        children: persons\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"count-elements\",\n        style: {\n          textAlign: \"right\"\n        },\n        children: itemsCount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 9\n      }, this), modal]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Clients;","map":{"version":3,"sources":["/var/www/html/rk_practica/src/containers/Clients/Clients.js"],"names":["React","Component","Client","Button","Input","Clients","state","clientes","openModal","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","name","minLength","last_name","phone_number","isNumber","formIsValid","componentDidMount","fetch","then","response","json","data","setState","catch","err","console","log","message","openModalHandler","event","id","closeModalHandler","checkValidaty","rules","isValid","trim","length","maxLength","pattern","test","isNaN","addNewClientHandler","preventDefault","editClientHandler","removeClientHadler","persons","personIndex","findIndex","person","splice","method","status","inputChangedHandler","controlName","updateControls","target","render","itemsCount","modal","map","index","bind","formElementsArray","key","push","config","form","formElement","textAlign"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Client from \"../../components/Client/Client\";\nimport Button from \"../../components/Button/Button\";\nimport Input from \"../../components/Input/Input\";\n\nclass Clients extends Component {\n  state = {\n    clientes: null,\n    openModal: false,\n    controls: {\n      email: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"email\",\n          placeholder: \"Email\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          isEmail: true,\n        },\n        valid: false,\n        touched: false,\n      },\n      name: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"Your First Name\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          minLength: 3,\n        },\n        valid: false,\n        touched: false,\n      },\n      last_name: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"Your Second Name\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          minLength: 3,\n        },\n        valid: false,\n        touched: false,\n      },\n      phone_number: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"number\",\n          placeholder: \"Enter your phone number\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          minLength: 9,\n          isNumber: true\n        },\n        valid: false,\n        touched: false,\n      },\n    },\n    formIsValid: false,\n  };\n  componentDidMount = () => {\n    fetch(\"http://localhost:3030/clients\")\n      .then((response) => {\n        return response.json();\n      })\n      .then((data) => {\n        this.setState({ clientes: data });\n      })\n      .catch((err) => {\n        console.log(err.message);\n      });\n  };\n\n  openModalHandler = (event, id) => {\n    \n    if(!!id){\n\n      console.log(id)\n    }\n \n    let openModal = this.state.openModal;\n    this.setState({ openModal: !openModal });\n  };\n\n  closeModalHandler = () => {\n    this.setState({ openModal: false });\n  }\n  checkValidaty = ( value, rules ) => {\n    let isValid = true;\n\n    if(rules.required) {\n        isValid = value.trim() !== \"\" && isValid;\n    }\n    if(rules.minLength){\n        isValid = value.length >= rules.minLength && isValid\n    }\n    if(rules.maxLength){\n        isValid = value.length <= rules.maxLength && isValid\n    }\n    if(rules.isEmail){\n        const pattern = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/\n        isValid = pattern.test(value) && isValid\n    }\n    if(rules.isNumber){\n      isValid = !isNaN(rules.isNumber)  && isValid\n    }\n\n    return isValid\n}\n  addNewClientHandler = (event, id) => {\n    event.preventDefault();\n    console.log(id)\n    /*let formData = []\n    for(let formElement in this.state.controls){\n        formData[formElement] = this.state.controls[formElement]\n    }\n\n    const order = {\n        userData: formData\n    }\n    \n    let persons = [...this.state.clientes];\n\n    let newPerson = {\n      name: order.userData.name.value,\n      last_name:  order.userData.last_name.value,\n      email:  order.userData.email.value,\n      phone_number: order.userData.phone_number\n    };\n\n    fetch(\"http://localhost:3030/clients\", {\n      method: \"POST\",\n      headers: {\n        \"Content-type\": \"application/json; charset=UTF-8\", // Indicates the content\n      },\n      body: JSON.stringify(newPerson),\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        persons.push(data);\n        this.setState({ clientes: persons,openModal: false });\n      })\n      .catch((err) => console.log(err));*/\n  };\n\n  editClientHandler = (id) => {\n    console.log(\"edit\", id);\n  };\n\n  removeClientHadler = (id) => {\n    let persons = [...this.state.clientes];\n    let personIndex = persons.findIndex((person) => person.id === id);\n    persons.splice(personIndex, 1);\n\n    fetch(\"http://localhost:3030/clients/\" + id, {\n      method: \"DELETE\",\n    })\n      .then((response) => {\n        response.json();\n        if (response.status === 200) {\n          this.setState({ clientes: persons });\n        }\n      })\n    \n      .catch((err) => console.log(err));\n  };\n  inputChangedHandler = (event, controlName) => {\n    const updateControls = {\n        ...this.state.controls,\n        [controlName]: {\n            ...this.state.controls[controlName],\n            value: event.target.value,\n            valid: this.checkValidaty(event.target.value, this.state.controls[controlName].validation),\n            touched: true\n        }\n    }\n    this.setState({controls: updateControls})\n}\n  render() {\n    let persons = \"\";\n    let itemsCount = 0;\n    let modal = \"\";\n    if (this.state.clientes) {\n      itemsCount = \"Total: \" + this.state.clientes.length + \" clientes\";\n      persons = this.state.clientes.map((person, index) => (\n        <Client\n          number={index + 1}\n          key={person.id}\n          name={person.name}\n          last_name={person.last_name}\n          email={person.email}\n          phone={person.phone_number}\n          clickedEdit={(event) =>this.openModalHandler(event, person.id)}\n          clickedRemove={this.removeClientHadler.bind(this, person.id)}\n        />\n      ));\n    }\n\n    if (this.state.openModal) {\n      const formElementsArray = [];\n      for (let key in this.state.controls) {\n        formElementsArray.push({\n          id: key,\n          config: this.state.controls[key],\n        });\n      }\n\n      const form = formElementsArray.map((formElement) => (\n        <Input\n          key={formElement.id}\n          elementType={formElement.config.elementType}\n          elementConfig={formElement.config.elementConfig}\n          value={formElement.config.value}\n          invalid={!formElement.config.valid}\n          shouldValidate={formElement.config.validation}\n          touched={formElement.config.touched}\n          changed={(event) => this.inputChangedHandler(event, formElement.id)}\n        />\n      ));\n\n      modal = (\n        <div className=\"modal\">\n          <form onSubmit={(event) => this.addNewClientHandler(event, null)}>\n            <h4 className=\"title\">Nuevo Cliente</h4>\n            {form}\n            <Button btnType=\"Success\" classes=\"green fullwidth\">\n              Crear Nuevo Cliente\n            </Button>\n            <Button btnType=\"Dismiss\" classes=\"red fullwidth\" clicked={this.closeModalHandler}>\n              Cancelar\n            </Button>\n          </form>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"Clients\">\n        <div className=\"row right\">\n          <Button classes=\"green\" clicked={(event) =>this.openModalHandler(event)}>\n            Nuevo Cliente\n          </Button>\n        </div>\n        <div className=\"list-items top\">{persons}</div>\n        <div className=\"count-elements\" style={{ textAlign: \"right\" }}>\n          {itemsCount}\n        </div>\n        {modal}\n      </div>\n    );\n  }\n}\nexport default Clients;\n"]},"metadata":{},"sourceType":"module"}