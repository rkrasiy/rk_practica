{"ast":null,"code":"var _jsxFileName = \"/var/www/html/rk_practica/src/containers/Clients/Clients.js\";\nimport React, { Component } from \"react\";\nimport Client from \"../../components/Client/Client\";\nimport Button from \"../../components/Button/Button\";\nimport Input from \"../../components/Input/Input\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Clients extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      clientes: null,\n      openModal: false,\n      controls: {\n        email: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"email\",\n            placeholder: \"Email\"\n          },\n          value: \"\",\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          touched: false\n        },\n        name: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"text\",\n            placeholder: \"Your First Name\"\n          },\n          value: \"\",\n          validation: {\n            required: true,\n            minLength: 3\n          },\n          valid: false,\n          touched: false\n        },\n        last_name: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"text\",\n            placeholder: \"Your Second Name\"\n          },\n          value: \"\",\n          validation: {\n            required: true,\n            minLength: 3\n          },\n          valid: false,\n          touched: false\n        },\n        phone_number: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"number\",\n            placeholder: \"Enter your phone number\"\n          },\n          value: \"\",\n          validation: {\n            required: true,\n            minLength: 9,\n            isNumber: true\n          },\n          valid: false,\n          touched: false\n        }\n      },\n      formIsValid: false,\n      formTitle: \"Nuevo Cliente\",\n      formBtn: \"Crear Nuevo Cliente\"\n    };\n\n    this.componentDidMount = () => {\n      fetch(\"http://localhost:3030/clients\").then(response => {\n        return response.json();\n      }).then(data => {\n        this.setState({\n          clientes: data\n        });\n      }).catch(err => {\n        console.log(err.message);\n      });\n    };\n\n    this.openModalHandler = (event, id) => {\n      let formData = { ...this.state.controls\n      };\n      let title = \"Nuevo Cliente\";\n      let btn = \"Crear Nuevo Cliente\";\n\n      if (!!id) {\n        let persons = [...this.state.clientes];\n        let personIndex = persons.findIndex(person => person.id === id);\n        let person = { ...persons[personIndex]\n        };\n\n        for (let key in person) {\n          if (!!formData[key]) {\n            formData[key].value = person[key];\n          }\n        }\n\n        title = \"Editar: \" + person.name;\n        btn = \"Editar\";\n      } else {\n        for (let key in formData) {\n          formData[key].value = \"\";\n        }\n      }\n\n      let openModal = this.state.openModal;\n      this.setState({\n        openModal: !openModal,\n        controls: formData,\n        formBtn: btn,\n        formTitle: title\n      });\n    };\n\n    this.closeModalHandler = () => {\n      this.setState({\n        openModal: false\n      });\n    };\n\n    this.checkValidaty = (value, rules) => {\n      let isValid = true;\n\n      if (rules.required) {\n        isValid = value.trim() !== \"\" && isValid;\n      }\n\n      if (rules.minLength) {\n        isValid = value.length >= rules.minLength && isValid;\n      }\n\n      if (rules.maxLength) {\n        isValid = value.length <= rules.maxLength && isValid;\n      }\n\n      if (rules.isEmail) {\n        const pattern = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;\n        isValid = pattern.test(value) && isValid;\n      }\n\n      if (rules.isNumber) {\n        isValid = !isNaN(rules.isNumber) && isValid;\n      }\n\n      return isValid;\n    };\n\n    this.addNewClientHandler = (event, id) => {\n      event.preventDefault();\n      let formData = [];\n\n      for (let formElement in this.state.controls) {\n        formData[formElement] = this.state.controls[formElement];\n      }\n\n      const order = {\n        userData: formData\n      };\n      let persons = [...this.state.clientes];\n      let newPerson = {\n        name: order.userData.name.value,\n        last_name: order.userData.last_name.value,\n        email: order.userData.email.value,\n        phone_number: order.userData.phone_number\n      };\n      let personId = \"\";\n      if (!!id) personId = \"/\" + id;\n      console.log(\"New\", newPerson);\n      /*fetch(\"http://localhost:3030/clients\" + personId, {\n        method: \"POST\",\n        headers: {\n          \"Content-type\": \"application/json; charset=UTF-8\", // Indicates the content\n        },\n        body: JSON.stringify(newPerson),\n      })\n        .then((response) => response.json())\n        .then((data) => {\n          persons.push(data);\n          this.setState({ clientes: persons,openModal: false });\n        })\n        .catch((err) => console.log(err));*/\n    };\n\n    this.editClientHandler = id => {\n      console.log(\"edit\", id);\n    };\n\n    this.removeClientHadler = id => {\n      let persons = [...this.state.clientes];\n      let personIndex = persons.findIndex(person => person.id === id);\n      persons.splice(personIndex, 1);\n      fetch(\"http://localhost:3030/clients/\" + id, {\n        method: \"DELETE\"\n      }).then(response => {\n        response.json();\n\n        if (response.status === 200) {\n          this.setState({\n            clientes: persons\n          });\n        }\n      }).catch(err => console.log(err));\n    };\n\n    this.inputChangedHandler = (event, controlName) => {\n      const updateControls = { ...this.state.controls,\n        [controlName]: { ...this.state.controls[controlName],\n          value: event.target.value,\n          valid: this.checkValidaty(event.target.value, this.state.controls[controlName].validation),\n          touched: true\n        }\n      };\n      this.setState({\n        controls: updateControls\n      });\n    };\n  }\n\n  render() {\n    let persons = \"\";\n    let itemsCount = 0;\n    let modal = \"\";\n\n    if (this.state.clientes) {\n      itemsCount = \"Total: \" + this.state.clientes.length + \" clientes\";\n      persons = this.state.clientes.map((person, index) => /*#__PURE__*/_jsxDEV(Client, {\n        number: index + 1,\n        name: person.name,\n        last_name: person.last_name,\n        email: person.email,\n        phone: person.phone_number,\n        clickedEdit: event => this.openModalHandler(event, person.id),\n        clickedRemove: this.removeClientHadler.bind(this, person.id)\n      }, person.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 9\n      }, this));\n    }\n\n    if (this.state.openModal) {\n      const formElementsArray = [];\n\n      for (let key in this.state.controls) {\n        formElementsArray.push({\n          id: key,\n          config: this.state.controls[key]\n        });\n      }\n\n      const form = formElementsArray.map(formElement => /*#__PURE__*/_jsxDEV(Input, {\n        elementType: formElement.config.elementType,\n        elementConfig: formElement.config.elementConfig,\n        value: formElement.config.value,\n        invalid: !formElement.config.valid,\n        shouldValidate: formElement.config.validation,\n        touched: formElement.config.touched,\n        changed: event => this.inputChangedHandler(event, formElement.id)\n      }, formElement.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 9\n      }, this));\n      modal = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: event => this.addNewClientHandler(event, null),\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"title\",\n            children: this.state.formTitle\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 13\n          }, this), form, /*#__PURE__*/_jsxDEV(Button, {\n            btnType: \"Success\",\n            classes: \"green fullwidth\",\n            children: this.state.formBtn\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            btnType: \"Dismiss\",\n            classes: \"red fullwidth\",\n            clicked: this.closeModalHandler,\n            children: \"Cancelar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 9\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Clients\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row right\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          classes: \"green\",\n          clicked: event => this.openModalHandler(event),\n          children: \"Nuevo Cliente\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"list-items top\",\n        children: persons\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"count-elements\",\n        style: {\n          textAlign: \"right\"\n        },\n        children: itemsCount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 9\n      }, this), modal]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Clients;","map":{"version":3,"sources":["/var/www/html/rk_practica/src/containers/Clients/Clients.js"],"names":["React","Component","Client","Button","Input","Clients","state","clientes","openModal","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","name","minLength","last_name","phone_number","isNumber","formIsValid","formTitle","formBtn","componentDidMount","fetch","then","response","json","data","setState","catch","err","console","log","message","openModalHandler","event","id","formData","title","btn","persons","personIndex","findIndex","person","key","closeModalHandler","checkValidaty","rules","isValid","trim","length","maxLength","pattern","test","isNaN","addNewClientHandler","preventDefault","formElement","order","userData","newPerson","personId","editClientHandler","removeClientHadler","splice","method","status","inputChangedHandler","controlName","updateControls","target","render","itemsCount","modal","map","index","bind","formElementsArray","push","config","form","textAlign"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Client from \"../../components/Client/Client\";\nimport Button from \"../../components/Button/Button\";\nimport Input from \"../../components/Input/Input\";\n\nclass Clients extends Component {\n  state = {\n    clientes: null,\n    openModal: false,\n    controls: {\n      email: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"email\",\n          placeholder: \"Email\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          isEmail: true,\n        },\n        valid: false,\n        touched: false,\n      },\n      name: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"Your First Name\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          minLength: 3,\n        },\n        valid: false,\n        touched: false,\n      },\n      last_name: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"Your Second Name\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          minLength: 3,\n        },\n        valid: false,\n        touched: false,\n      },\n      phone_number: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"number\",\n          placeholder: \"Enter your phone number\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          minLength: 9,\n          isNumber: true\n        },\n        valid: false,\n        touched: false,\n      },\n    },\n    formIsValid: false,\n    formTitle: \"Nuevo Cliente\",\n    formBtn: \"Crear Nuevo Cliente\"\n  };\n  componentDidMount = () => {\n    fetch(\"http://localhost:3030/clients\")\n      .then((response) => {\n        return response.json();\n      })\n      .then((data) => {\n        this.setState({ clientes: data });\n      })\n      .catch((err) => {\n        console.log(err.message);\n      });\n  };\n\n  openModalHandler = (event, id) => {\n    let formData = {...this.state.controls}\n    let title = \"Nuevo Cliente\"\n    let btn = \"Crear Nuevo Cliente\"\n    if(!!id){\n      let persons = [ ...this.state.clientes];\n      let personIndex = persons.findIndex((person) => person.id === id);\n      let person = {...persons[personIndex]};\n\n      for(let key in person){\n         if(!!formData[key]){\n          formData[key].value = person[key]\n        }\n      }\n      title = \"Editar: \" + person.name\n      btn = \"Editar\"\n    }else{\n      for(let key in formData){\n        formData[key].value = \"\"\n      }\n    }\n    \n    let openModal = this.state.openModal;\n    this.setState({ \n      openModal: !openModal, \n      controls: formData,\n      formBtn: btn,\n      formTitle: title\n    });\n  };\n\n  closeModalHandler = () => {\n    this.setState({ openModal: false });\n  }\n  checkValidaty = ( value, rules ) => {\n    let isValid = true;\n\n    if(rules.required) {\n        isValid = value.trim() !== \"\" && isValid;\n    }\n    if(rules.minLength){\n        isValid = value.length >= rules.minLength && isValid\n    }\n    if(rules.maxLength){\n        isValid = value.length <= rules.maxLength && isValid\n    }\n    if(rules.isEmail){\n        const pattern = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/\n        isValid = pattern.test(value) && isValid\n    }\n    if(rules.isNumber){\n      isValid = !isNaN(rules.isNumber)  && isValid\n    }\n\n    return isValid\n}\n  addNewClientHandler = (event, id) => {\n    event.preventDefault();\n    let formData = []\n    for(let formElement in this.state.controls){\n        formData[formElement] = this.state.controls[formElement]\n    }\n\n    const order = {\n        userData: formData\n    }\n    \n    let persons = [...this.state.clientes];\n\n    let newPerson = {\n      name: order.userData.name.value,\n      last_name:  order.userData.last_name.value,\n      email:  order.userData.email.value,\n      phone_number: order.userData.phone_number\n    };\n    let personId = \"\"\n    if(!!id)\n      personId = \"/\" + id\n\n    console.log(\"New\", newPerson)\n    /*fetch(\"http://localhost:3030/clients\" + personId, {\n      method: \"POST\",\n      headers: {\n        \"Content-type\": \"application/json; charset=UTF-8\", // Indicates the content\n      },\n      body: JSON.stringify(newPerson),\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        persons.push(data);\n        this.setState({ clientes: persons,openModal: false });\n      })\n      .catch((err) => console.log(err));*/\n  };\n\n  editClientHandler = (id) => {\n    console.log(\"edit\", id);\n  };\n\n  removeClientHadler = (id) => {\n    let persons = [...this.state.clientes];\n    let personIndex = persons.findIndex((person) => person.id === id);\n    persons.splice(personIndex, 1);\n\n    fetch(\"http://localhost:3030/clients/\" + id, {\n      method: \"DELETE\",\n    })\n      .then((response) => {\n        response.json();\n        if (response.status === 200) {\n          this.setState({ clientes: persons });\n        }\n      })\n    \n      .catch((err) => console.log(err));\n  };\n  inputChangedHandler = (event, controlName) => {\n    const updateControls = {\n        ...this.state.controls,\n        [controlName]: {\n            ...this.state.controls[controlName],\n            value: event.target.value,\n            valid: this.checkValidaty(event.target.value, this.state.controls[controlName].validation),\n            touched: true\n        }\n    }\n    this.setState({controls: updateControls})\n}\n  render() {\n    let persons = \"\";\n    let itemsCount = 0;\n    let modal = \"\";\n    if (this.state.clientes) {\n      itemsCount = \"Total: \" + this.state.clientes.length + \" clientes\";\n      persons = this.state.clientes.map((person, index) => (\n        <Client\n          number={index + 1}\n          key={person.id}\n          name={person.name}\n          last_name={person.last_name}\n          email={person.email}\n          phone={person.phone_number}\n          clickedEdit={(event) =>this.openModalHandler(event, person.id)}\n          clickedRemove={this.removeClientHadler.bind(this, person.id)}\n        />\n      ));\n    }\n\n    if (this.state.openModal) {\n      const formElementsArray = [];\n      for (let key in this.state.controls) {\n        formElementsArray.push({\n          id: key,\n          config: this.state.controls[key],\n        });\n      }\n\n      const form = formElementsArray.map((formElement) => (\n        <Input\n          key={formElement.id}\n          elementType={formElement.config.elementType}\n          elementConfig={formElement.config.elementConfig}\n          value={formElement.config.value}\n          invalid={!formElement.config.valid}\n          shouldValidate={formElement.config.validation}\n          touched={formElement.config.touched}\n          changed={(event) => this.inputChangedHandler(event, formElement.id)}\n        />\n      ));\n\n      modal = (\n        <div className=\"modal\">\n          <form onSubmit={(event) => this.addNewClientHandler(event, null)}>\n            <h4 className=\"title\">{this.state.formTitle}</h4>\n            {form}\n            <Button btnType=\"Success\" classes=\"green fullwidth\">\n              {this.state.formBtn}\n            </Button>\n            <Button btnType=\"Dismiss\" classes=\"red fullwidth\" clicked={this.closeModalHandler}>\n              Cancelar\n            </Button>\n          </form>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"Clients\">\n        <div className=\"row right\">\n          <Button classes=\"green\" clicked={(event) =>this.openModalHandler(event)}>\n            Nuevo Cliente\n          </Button>\n        </div>\n        <div className=\"list-items top\">{persons}</div>\n        <div className=\"count-elements\" style={{ textAlign: \"right\" }}>\n          {itemsCount}\n        </div>\n        {modal}\n      </div>\n    );\n  }\n}\nexport default Clients;\n"]},"metadata":{},"sourceType":"module"}