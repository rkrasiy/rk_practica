{"ast":null,"code":"var _jsxFileName = \"/var/www/html/rk_practica/src/containers/FormAuth/FormAuth.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Input from \"../../components/Input/Input\";\nimport Button from \"../../components/Button/Button\";\nimport \"./FormAuth.css\";\nimport * as actions from \"../../store/actions/index\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass FormAuth extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      controls: {\n        email: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"email\",\n            placeholder: \"Email\"\n          },\n          value: '',\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          touched: false\n        },\n        password: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"password\",\n            placeholder: \"*****\"\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 4\n          },\n          valid: false,\n          touched: false\n        }\n      },\n      formIsValid: false\n    };\n\n    this.checkValidaty = (value, rules) => {\n      let isValid = true;\n\n      if (rules.required) {\n        isValid = value.trim() !== \"\" && isValid;\n      }\n\n      if (rules.minLength) {\n        isValid = value.length >= rules.minLength && isValid;\n      }\n\n      if (rules.maxLength) {\n        isValid = value.length <= rules.maxLength && isValid;\n      }\n\n      if (rules.isEmail) {\n        const pattern = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;\n        isValid = pattern.test(value) && isValid;\n      }\n\n      return isValid;\n    };\n\n    this.submitHandler = event => {\n      event.preventDefault();\n      this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value);\n      /*for(let formElement in this.state.controls){\n          formData[formElement] = this.state.controls[formElement]\n      }\n       const order = {\n          userData: formData\n      }\n      console.log(\"asd\", order)*/\n    };\n\n    this.inputChangedHandler = (event, controlName) => {\n      //console.log(event.target.value)\n      const updateControls = { ...this.state.controls,\n        [controlName]: { ...this.state.controls[controlName],\n          value: event.target.value,\n          valid: this.checkValidaty(event.target.value, this.state.controls[controlName].validation),\n          touched: true\n        }\n      };\n      /*const updateFormElement = {...updateControls[id]}\n      updateFormElement.value = event.target.value;\n       updateFormElement.valid = this.checkValidaty( updateFormElement.value, updateFormElement.validation)\n      updateFormElement.touched = true;\n      updateControls[id] = updateFormElement;\n       let formIsValid = true;\n      for(let inputIdentifiers in updateControls){\n          formIsValid = updateControls[inputIdentifiers].valid && formIsValid\n      }*/\n\n      this.setState({\n        controls: updateControls\n      });\n    };\n  }\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.controls) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.controls[key]\n      });\n    }\n\n    const form = formElementsArray.map(formElement => /*#__PURE__*/_jsxDEV(Input, {\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value,\n      invalid: !formElement.config.valid,\n      shouldValidate: formElement.config.validation,\n      touched: formElement.config.touched,\n      changed: event => this.inputChangedHandler(event, formElement.id)\n    }, formElement.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }, this));\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Form-Auth\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: event => this.submitHandler(event),\n        children: [form, /*#__PURE__*/_jsxDEV(Button, {\n          btnType: \"Success\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, password) => dispatch(actions.auth())\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(FormAuth);","map":{"version":3,"sources":["/var/www/html/rk_practica/src/containers/FormAuth/FormAuth.js"],"names":["React","Component","connect","Input","Button","actions","FormAuth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","formIsValid","checkValidaty","rules","isValid","trim","length","maxLength","pattern","test","submitHandler","event","preventDefault","props","onAuth","inputChangedHandler","controlName","updateControls","target","setState","render","formElementsArray","key","push","id","config","form","map","formElement","mapDispatchToProps","dispatch","auth"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport {connect} from 'react-redux';\n\nimport Input from \"../../components/Input/Input\";\nimport Button from \"../../components/Button/Button\";\n\nimport \"./FormAuth.css\"\nimport * as actions from \"../../store/actions/index\"\nclass FormAuth extends Component{\n    state = {\n        controls: {\n            email: {\n                elementType: \"input\",\n                elementConfig: {\n                    type: \"email\",\n                    placeholder: \"Email\"\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    isEmail: true\n                },\n                valid: false,\n                touched: false\n            },\n            password: {\n                elementType: \"input\",\n                elementConfig: {\n                    type: \"password\",\n                    placeholder: \"*****\"\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 4\n                },\n                valid: false,\n                touched: false\n            }\n        },\n        formIsValid: false\n    }\n    checkValidaty = ( value, rules ) => {\n        let isValid = true;\n\n        if(rules.required) {\n            isValid = value.trim() !== \"\" && isValid;\n        }\n        if(rules.minLength){\n            isValid = value.length >= rules.minLength && isValid\n        }\n        if(rules.maxLength){\n            isValid = value.length <= rules.maxLength && isValid\n        }\n        if(rules.isEmail){\n            const pattern = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/\n            isValid = pattern.test(value) && isValid\n        }\n\n        return isValid\n    }\n    submitHandler = (event) =>{\n        event.preventDefault()\n        \n        this.props.onAuth(this.state.controls.email.value,this.state.controls.password.value)\n        /*for(let formElement in this.state.controls){\n            formData[formElement] = this.state.controls[formElement]\n        }\n\n        const order = {\n            userData: formData\n        }\n        console.log(\"asd\", order)*/\n    }\n\n    inputChangedHandler = (event, controlName) => {\n        //console.log(event.target.value)\n        const updateControls = {\n            ...this.state.controls,\n            [controlName]: {\n                ...this.state.controls[controlName],\n                value: event.target.value,\n                valid: this.checkValidaty(event.target.value, this.state.controls[controlName].validation),\n                touched: true\n            }\n        }\n        /*const updateFormElement = {...updateControls[id]}\n        updateFormElement.value = event.target.value;\n\n        updateFormElement.valid = this.checkValidaty( updateFormElement.value, updateFormElement.validation)\n        updateFormElement.touched = true;\n        updateControls[id] = updateFormElement;\n\n        let formIsValid = true;\n        for(let inputIdentifiers in updateControls){\n            formIsValid = updateControls[inputIdentifiers].valid && formIsValid\n        }*/\n        this.setState({controls: updateControls})\n    }\n\n    render(){\n        const formElementsArray = [];\n        for(let key in this.state.controls){\n            formElementsArray.push({\n                id: key,\n                config: this.state.controls[key]\n            })\n        }\n\n        const form = formElementsArray.map(formElement => (\n            <Input\n                key={formElement.id}\n                elementType={formElement.config.elementType}\n                elementConfig={formElement.config.elementConfig}\n                value={formElement.config.value}\n                invalid={!formElement.config.valid}\n                shouldValidate={formElement.config.validation}\n                touched={formElement.config.touched}\n                changed={(event)=> this.inputChangedHandler(event,formElement.id)}/>\n        ))\n        return (\n            <div className=\"Form-Auth\">\n                <form onSubmit={(event) => this.submitHandler(event)}>\n                  {form}  \n                <Button btnType=\"Success\">Submit</Button>\n                </form>\n            </div>\n        )\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAuth: (email, password) => dispatch(actions.auth())\n    }\n}\n\nexport default connect(null, mapDispatchToProps)(FormAuth)"]},"metadata":{},"sourceType":"module"}