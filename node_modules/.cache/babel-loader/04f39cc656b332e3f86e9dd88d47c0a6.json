{"ast":null,"code":"var _jsxFileName = \"/var/www/html/rk_practica/src/containers/Clients/Clients.js\";\nimport React, { Component } from \"react\";\nimport Client from \"../../components/Client/Client\";\nimport Button from \"../../components/Button/Button\";\nimport Input from \"../../components/Input/Input\";\nimport * as form from \"../../store/form\";\nimport * as db from \"../../db_config\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Clients extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      clientes: null,\n      openModal: false,\n      controls: {\n        name: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"text\",\n            placeholder: \"Nombre\"\n          },\n          value: \"\",\n          validation: {\n            required: true,\n            minLength: 3\n          },\n          valid: false,\n          touched: false\n        },\n        last_name: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"text\",\n            placeholder: \"Apellido\"\n          },\n          value: \"\",\n          validation: {\n            required: true,\n            minLength: 3\n          },\n          valid: false,\n          touched: false\n        },\n        email: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"email\",\n            placeholder: \"Email\"\n          },\n          value: \"\",\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          touched: false\n        },\n        phone_number: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"number\",\n            placeholder: \"Numero tel.\"\n          },\n          value: \"\",\n          validation: {\n            required: true,\n            minLength: 9,\n            maxLength: 9,\n            isNumber: true\n          },\n          valid: false,\n          touched: false\n        }\n      },\n      formIsValid: false,\n      formTitle: \"Nuevo Cliente\",\n      formBtn: \"Crear Nuevo Cliente\",\n      personId: null\n    };\n\n    this.componentDidMount = () => {\n      fetch(db.URL + \"/clients\").then(response => {\n        return response.json();\n      }).then(data => {\n        this.setState({\n          clientes: data\n        });\n      }).catch(err => {\n        console.log(err.message);\n      });\n    };\n\n    this.openModalHandler = (event, id) => {\n      let formData = { ...this.state.controls\n      };\n      let title = \"Nuevo Cliente\";\n      let btn = \"Crear Nuevo Cliente\";\n\n      if (!!id) {\n        let persons = [...this.state.clientes];\n        let personIndex = persons.findIndex(person => person.id === id);\n        let person = { ...persons[personIndex]\n        };\n\n        for (let key in person) {\n          if (!!formData[key]) {\n            formData[key].value = person[key];\n          }\n        }\n\n        title = \"Editar: \" + person.name;\n        btn = \"Editar\";\n      } else {\n        for (let key in formData) {\n          formData[key].value = \"\";\n        }\n      }\n\n      let openModal = this.state.openModal;\n      this.setState({\n        openModal: !openModal,\n        controls: formData,\n        formBtn: btn,\n        formTitle: title,\n        personId: id\n      });\n    };\n\n    this.closeModalHandler = () => {\n      const updatedControls = form.clearInputs(this.state.controls);\n      this.setState({\n        openModal: false,\n        controls: updatedControls\n      });\n    };\n\n    this.inputHandler = (event, controlName) => {\n      const updateControls = form.inputChangedHandler(this.state.controls, controlName, event.target.value);\n      this.setState({\n        controls: updateControls\n      });\n    };\n\n    this.addNewClientHandler = (event, id) => {\n      event.preventDefault();\n      let formData = [];\n      let url = db.URL + \"/clients\";\n      let method = \"POST\";\n      let formIsValid = true;\n      const controls = { ...this.state.controls\n      };\n\n      if (!!id) {\n        url += \"/\" + id;\n        method = \"PUT\";\n      }\n\n      for (let formElement in controls) {\n        if (controls[formElement].valid) {\n          formData[formElement] = controls[formElement];\n        } else if (!controls[formElement].valid) {\n          formIsValid = form.checkValidaty(controls[formElement].value, controls[formElement].validation);\n\n          if (formIsValid) {\n            formData[formElement] = controls[formElement];\n          } else {\n            controls[formElement].touched = true;\n          }\n        }\n      }\n\n      if (!formIsValid) {\n        return this.setState({\n          formIsValid: formIsValid,\n          controls: controls\n        });\n      }\n\n      const order = {\n        userData: formData\n      };\n      let persons = [...this.state.clientes];\n      let newPerson = {\n        name: order.userData.name.value,\n        last_name: order.userData.last_name.value,\n        email: order.userData.email.value,\n        phone_number: order.userData.phone_number.value\n      };\n      fetch(url, {\n        method: method,\n        headers: {\n          \"Content-type\": \"application/json; charset=UTF-8\" // Indicates the content\n\n        },\n        body: JSON.stringify(newPerson)\n      }).then(response => response.json()).then(data => {\n        let index = persons.findIndex(person => person.id === data.id);\n\n        if (index !== -1) {\n          persons[index] = data;\n        } else {\n          persons.push(data);\n        }\n\n        this.setState({\n          clientes: persons,\n          openModal: false\n        });\n      }).catch(err => console.log(err));\n    };\n\n    this.removeClientHadler = id => {\n      let persons = [...this.state.clientes];\n      let personIndex = persons.findIndex(person => person.id === id);\n      persons.splice(personIndex, 1);\n      fetch(\"http://localhost:3030/clients/\" + id, {\n        method: \"DELETE\"\n      }).then(response => {\n        response.json();\n\n        if (response.status === 200) {\n          this.setState({\n            clientes: persons\n          });\n        }\n      }).catch(err => console.log(err));\n    };\n  }\n\n  render() {\n    let persons = \"\";\n    let itemsCount = 0;\n    let modal = \"\";\n    let personId = this.state.personId;\n\n    if (!!this.state.clientes) {\n      itemsCount = \"Total: \" + this.state.clientes.length + \" clientes\";\n      persons = this.state.clientes.map((person, index) => /*#__PURE__*/_jsxDEV(Client, {\n        number: index + 1,\n        name: person.name,\n        last_name: person.last_name,\n        email: person.email,\n        phone: person.phone_number,\n        clickedEdit: event => this.openModalHandler(event, person.id),\n        clickedRemove: this.removeClientHadler.bind(this, person.id)\n      }, person.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }, this));\n    }\n\n    if (!!this.state.openModal) {\n      const formElementsArray = [];\n\n      for (let key in this.state.controls) {\n        formElementsArray.push({\n          id: key,\n          config: this.state.controls[key]\n        });\n      }\n\n      const form = formElementsArray.map(formElement => /*#__PURE__*/_jsxDEV(Input, {\n        elementType: formElement.config.elementType,\n        elementConfig: formElement.config.elementConfig,\n        value: formElement.config.value,\n        invalid: !formElement.config.valid,\n        shouldValidate: formElement.config.validation,\n        touched: formElement.config.touched,\n        changed: event => this.inputHandler(event, formElement.id)\n      }, formElement.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 9\n      }, this));\n      modal = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: event => this.addNewClientHandler(event, personId),\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"title\",\n            children: this.state.formTitle\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 13\n          }, this), form, /*#__PURE__*/_jsxDEV(Button, {\n            btnType: \"Success\",\n            classes: \"green fullwidth\",\n            children: this.state.formBtn\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            btnType: \"Dismiss\",\n            classes: \"red fullwidth\",\n            clicked: this.closeModalHandler,\n            children: \"Cancelar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 9\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Clients\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row right\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          classes: \"green\",\n          clicked: event => this.openModalHandler(event),\n          children: \"Nuevo Cliente\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"list-items top\",\n        children: persons\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"count-elements\",\n        style: {\n          textAlign: \"right\"\n        },\n        children: itemsCount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 9\n      }, this), modal]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Clients;","map":{"version":3,"sources":["/var/www/html/rk_practica/src/containers/Clients/Clients.js"],"names":["React","Component","Client","Button","Input","form","db","Clients","state","clientes","openModal","controls","name","elementType","elementConfig","type","placeholder","value","validation","required","minLength","valid","touched","last_name","email","isEmail","phone_number","maxLength","isNumber","formIsValid","formTitle","formBtn","personId","componentDidMount","fetch","URL","then","response","json","data","setState","catch","err","console","log","message","openModalHandler","event","id","formData","title","btn","persons","personIndex","findIndex","person","key","closeModalHandler","updatedControls","clearInputs","inputHandler","controlName","updateControls","inputChangedHandler","target","addNewClientHandler","preventDefault","url","method","formElement","checkValidaty","order","userData","newPerson","headers","body","JSON","stringify","index","push","removeClientHadler","splice","status","render","itemsCount","modal","length","map","bind","formElementsArray","config","textAlign"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Client from \"../../components/Client/Client\";\nimport Button from \"../../components/Button/Button\";\nimport Input from \"../../components/Input/Input\";\nimport * as form from \"../../store/form\"\nimport * as db from \"../../db_config\"\n\nclass Clients extends Component {\n  state = {\n    clientes: null,\n    openModal: false,\n    controls: {\n      name: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"Nombre\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          minLength: 3,\n        },\n        valid: false,\n        touched: false,\n      },\n      last_name: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"Apellido\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          minLength: 3,\n        },\n        valid: false,\n        touched: false,\n      },\n      email: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"email\",\n          placeholder: \"Email\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          isEmail: true,\n        },\n        valid: false,\n        touched: false,\n      },\n      phone_number: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"number\",\n          placeholder: \"Numero tel.\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          minLength: 9,\n          maxLength: 9,\n          isNumber: true\n        },\n        valid: false,\n        touched: false,\n      },\n    },\n    formIsValid: false,\n    formTitle: \"Nuevo Cliente\",\n    formBtn: \"Crear Nuevo Cliente\",\n    personId: null\n  };\n\n  componentDidMount = () => {\n    fetch(db.URL + \"/clients\")\n      .then((response) => {\n        return response.json();\n      })\n      .then((data) => {\n        this.setState({ clientes: data });\n      })\n      .catch((err) => {\n        console.log(err.message);\n      });\n  };\n\n  openModalHandler = (event, id) => {\n    let formData = {...this.state.controls}\n    let title = \"Nuevo Cliente\"\n    let btn = \"Crear Nuevo Cliente\"\n    if(!!id){\n      let persons = [ ...this.state.clientes];\n      let personIndex = persons.findIndex((person) => person.id === id);\n      let person = {...persons[personIndex]};\n\n      for(let key in person){\n         if(!!formData[key]){\n          formData[key].value = person[key]\n        }\n      }\n      title = \"Editar: \" + person.name\n      btn = \"Editar\"\n    }else{\n      for(let key in formData){\n        formData[key].value = \"\"\n      }\n    }\n    \n    let openModal = this.state.openModal;\n    this.setState({ \n      openModal: !openModal, \n      controls: formData,\n      formBtn: btn,\n      formTitle: title,\n      personId: id\n    });\n  };\n\n  closeModalHandler = () => {\n    const updatedControls = form.clearInputs(this.state.controls)\n    this.setState({ openModal: false, controls: updatedControls});\n  }\n\n  inputHandler = (event, controlName) => {\n    const updateControls = form.inputChangedHandler(this.state.controls, controlName, event.target.value)\n    this.setState({controls: updateControls})\n  }\n  addNewClientHandler = (event, id) => {\n    event.preventDefault();\n    let formData = [];\n    let url = db.URL + \"/clients\";\n    let method = \"POST\";\n    let formIsValid = true;\n    const controls = {...this.state.controls}\n    if(!!id){\n      url += \"/\" + id\n      method = \"PUT\"\n    }\n    \n    for(let formElement in controls){\n      if(controls[formElement].valid){\n          formData[formElement] = controls[formElement] \n      }else if(!controls[formElement].valid){\n        formIsValid = form.checkValidaty(controls[formElement].value, controls[formElement].validation)\n        if(formIsValid){\n          formData[formElement] = controls[formElement] \n        }else{\n          controls[formElement].touched = true\n        }\n      }\n    }\n\n    if(!formIsValid){\n      return this.setState({formIsValid: formIsValid, controls: controls})\n    }\n\n    const order = {\n        userData: formData\n    }\n    \n    let persons = [...this.state.clientes];\n\n    let newPerson = {\n      name: order.userData.name.value,\n      last_name:  order.userData.last_name.value,\n      email:  order.userData.email.value,\n      phone_number: order.userData.phone_number.value\n    };\n\n    fetch(url, {\n      method: method,\n      headers: {\n        \"Content-type\": \"application/json; charset=UTF-8\", // Indicates the content\n      },\n      body: JSON.stringify(newPerson),\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        let index = persons.findIndex( person => person.id === data.id)\n        if(index !== -1){\n          persons[index] = data\n        }else{\n          persons.push(data);\n        }\n        this.setState({ clientes: persons,openModal: false });\n      })\n      .catch((err) => console.log(err));\n  };\n\n  removeClientHadler = (id) => {\n    let persons = [...this.state.clientes];\n    let personIndex = persons.findIndex((person) => person.id === id);\n    persons.splice(personIndex, 1);\n\n    fetch(\"http://localhost:3030/clients/\" + id, {\n      method: \"DELETE\",\n    })\n      .then((response) => {\n        response.json();\n        if (response.status === 200) {\n          this.setState({ clientes: persons });\n        }\n      })\n    \n      .catch((err) => console.log(err));\n  };\n  \n  render() {\n    let persons = \"\";\n    let itemsCount = 0;\n    let modal = \"\";\n    let personId = this.state.personId;\n\n    if (!!this.state.clientes) {\n\n      itemsCount = \"Total: \" + this.state.clientes.length + \" clientes\";\n      persons = this.state.clientes.map((person, index) => (\n        <Client\n          number={index + 1}\n          key={person.id}\n          name={person.name}\n          last_name={person.last_name}\n          email={person.email}\n          phone={person.phone_number}\n          clickedEdit={(event) =>this.openModalHandler(event,person.id)}\n          clickedRemove={this.removeClientHadler.bind(this, person.id)}\n        />\n      ));\n    }\n\n    if (!!this.state.openModal) {\n      const formElementsArray = [];\n      for (let key in this.state.controls) {\n        formElementsArray.push({\n          id: key,\n          config: this.state.controls[key],\n        });\n      }\n\n      const form = formElementsArray.map((formElement) => (\n        <Input\n          key={formElement.id}\n          elementType={formElement.config.elementType}\n          elementConfig={formElement.config.elementConfig}\n          value={formElement.config.value}\n          invalid={!formElement.config.valid}\n          shouldValidate={formElement.config.validation}\n          touched={formElement.config.touched}\n          changed={(event) => this.inputHandler(event, formElement.id)}\n        />\n      ));\n\n      modal = (\n        <div className=\"modal\">\n          <form onSubmit={(event) => this.addNewClientHandler(event, personId)}>\n            <h4 className=\"title\">{this.state.formTitle}</h4>\n            {form}\n            <Button \n              btnType=\"Success\" \n              classes=\"green fullwidth\">{this.state.formBtn}\n            </Button>\n            <Button \n              btnType=\"Dismiss\" \n              classes=\"red fullwidth\" \n              clicked={this.closeModalHandler}>Cancelar\n            </Button>\n          </form>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"Clients\">\n        <div className=\"row right\">\n          <Button classes=\"green\" clicked={(event) =>this.openModalHandler(event)}>\n            Nuevo Cliente\n          </Button>\n        </div>\n        <div className=\"list-items top\">{persons}</div>\n        <div className=\"count-elements\" style={{ textAlign: \"right\" }}>\n          {itemsCount}\n        </div>\n        {modal}\n      </div>\n    );\n  }\n}\nexport default Clients;\n"]},"metadata":{},"sourceType":"module"}