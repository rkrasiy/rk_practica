{"ast":null,"code":"var _jsxFileName = \"/var/www/html/rk_practica/src/containers/Clients/Clients.js\";\nimport React, { Component } from \"react\";\nimport Client from \"../../components/Client/Client\";\nimport Button from \"../../components/Button/Button\";\nimport Input from \"../../components/Input/Input\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Clients extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      clientes: null,\n      openModal: false,\n      controls: {\n        email: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"email\",\n            placeholder: \"Email\"\n          },\n          value: \"\",\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          touched: false\n        },\n        name: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"text\",\n            placeholder: \"Your First Name\"\n          },\n          value: \"\",\n          validation: {\n            required: true,\n            minLength: 3\n          },\n          valid: false,\n          touched: false\n        },\n        last_name: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"text\",\n            placeholder: \"Your Second Name\"\n          },\n          value: \"\",\n          validation: {\n            required: true,\n            minLength: 3\n          },\n          valid: false,\n          touched: false\n        },\n        phone_number: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"number\",\n            placeholder: \"Enter your phone number\"\n          },\n          value: \"\",\n          validation: {\n            required: true,\n            minLength: 9,\n            maxLength: 9,\n            isNumber: true\n          },\n          valid: false,\n          touched: false\n        }\n      },\n      formIsValid: false,\n      formTitle: \"Nuevo Cliente\",\n      formBtn: \"Crear Nuevo Cliente\",\n      personId: null\n    };\n\n    this.componentDidMount = () => {\n      fetch(\"http://localhost:3030/clients\").then(response => {\n        return response.json();\n      }).then(data => {\n        this.setState({\n          clientes: data\n        });\n      }).catch(err => {\n        console.log(err.message);\n      });\n    };\n\n    this.openModalHandler = (event, id) => {\n      let formData = { ...this.state.controls\n      };\n      let title = \"Nuevo Cliente\";\n      let btn = \"Crear Nuevo Cliente\";\n\n      if (!!id) {\n        let persons = [...this.state.clientes];\n        let personIndex = persons.findIndex(person => person.id === id);\n        let person = { ...persons[personIndex]\n        };\n\n        for (let key in person) {\n          if (!!formData[key]) {\n            formData[key].value = person[key];\n          }\n        }\n\n        title = \"Editar: \" + person.name;\n        btn = \"Editar\";\n      } else {\n        for (let key in formData) {\n          formData[key].value = \"\";\n        }\n      }\n\n      let openModal = this.state.openModal;\n      this.setState({\n        openModal: !openModal,\n        controls: formData,\n        formBtn: btn,\n        formTitle: title,\n        personId: id\n      });\n    };\n\n    this.closeModalHandler = () => {\n      this.setState({\n        openModal: false\n      });\n    };\n\n    this.checkValidaty = (value, rules) => {\n      let isValid = true;\n\n      if (rules.required) {\n        isValid = value.trim() !== \"\" && isValid;\n      }\n\n      if (rules.minLength) {\n        isValid = value.length >= rules.minLength && isValid;\n      }\n\n      if (rules.maxLength) {\n        isValid = value.length <= rules.maxLength && isValid;\n      }\n\n      if (rules.isEmail) {\n        const pattern = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;\n        isValid = pattern.test(value) && isValid;\n      }\n\n      if (rules.isNumber) {\n        isValid = !isNaN(rules.isNumber) && isValid;\n      }\n\n      return isValid;\n    };\n\n    this.addNewClientHandler = (event, id) => {\n      event.preventDefault();\n      let formData = [];\n      let url = \"http://localhost:3030/clients\";\n      let method = \"POST\";\n      let formIsValid = true;\n      const controls = { ...this.state.controls\n      };\n\n      if (!!id) {\n        url += \"/\" + id;\n        method = \"PUT\";\n      }\n\n      console.log(\"controls: \", controls);\n\n      for (let formElement in controls) {\n        console.log(\"Cont -valid:\", controls[formElement]);\n\n        if (controls[formElement].validation.required && controls[formElement].valid && formIsValid) {\n          formIsValid = this.checkValidaty(controls[formElement].value, controls[formElement].validation);\n          formData[formElement] = controls[formElement];\n        } else {\n          formIsValid = false;\n          alert(\"Empty camp\");\n        }\n      }\n\n      if (!formIsValid) {\n        return this.setState({\n          formIsValid: formIsValid,\n          controls: controls\n        });\n      }\n\n      const order = {\n        userData: formData\n      };\n      let persons = [...this.state.clientes];\n      let newPerson = {\n        name: order.userData.name.value,\n        last_name: order.userData.last_name.value,\n        email: order.userData.email.value,\n        phone_number: order.userData.phone_number.value\n      };\n      fetch(url, {\n        method: method,\n        headers: {\n          \"Content-type\": \"application/json; charset=UTF-8\" // Indicates the content\n\n        },\n        body: JSON.stringify(newPerson)\n      }).then(response => response.json()).then(data => {\n        let index = persons.findIndex(person => person.id === data.id);\n\n        if (index !== -1) {\n          persons[index] = data;\n        } else {\n          persons.push(data);\n        }\n\n        this.setState({\n          clientes: persons,\n          openModal: false\n        });\n      }).catch(err => console.log(err));\n    };\n\n    this.removeClientHadler = id => {\n      let persons = [...this.state.clientes];\n      let personIndex = persons.findIndex(person => person.id === id);\n      persons.splice(personIndex, 1);\n      fetch(\"http://localhost:3030/clients/\" + id, {\n        method: \"DELETE\"\n      }).then(response => {\n        response.json();\n\n        if (response.status === 200) {\n          this.setState({\n            clientes: persons\n          });\n        }\n      }).catch(err => console.log(err));\n    };\n\n    this.inputChangedHandler = (event, controlName) => {\n      const updateControls = { ...this.state.controls,\n        [controlName]: { ...this.state.controls[controlName],\n          value: event.target.value,\n          valid: this.checkValidaty(event.target.value, this.state.controls[controlName].validation),\n          touched: true\n        }\n      };\n      this.setState({\n        controls: updateControls\n      });\n    };\n  }\n\n  render() {\n    let persons = \"\";\n    let itemsCount = 0;\n    let modal = \"\";\n    let personId = this.state.personId;\n\n    if (this.state.clientes) {\n      itemsCount = \"Total: \" + this.state.clientes.length + \" clientes\";\n      persons = this.state.clientes.map((person, index) => /*#__PURE__*/_jsxDEV(Client, {\n        number: index + 1,\n        name: person.name,\n        last_name: person.last_name,\n        email: person.email,\n        phone: person.phone_number,\n        clickedEdit: event => this.openModalHandler(event, person.id),\n        clickedRemove: this.removeClientHadler.bind(this, person.id)\n      }, person.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 9\n      }, this));\n    }\n\n    if (this.state.openModal) {\n      const formElementsArray = [];\n\n      for (let key in this.state.controls) {\n        formElementsArray.push({\n          id: key,\n          config: this.state.controls[key]\n        });\n      }\n\n      const form = formElementsArray.map(formElement => /*#__PURE__*/_jsxDEV(Input, {\n        elementType: formElement.config.elementType,\n        elementConfig: formElement.config.elementConfig,\n        value: formElement.config.value,\n        invalid: !formElement.config.valid,\n        shouldValidate: formElement.config.validation,\n        touched: formElement.config.touched,\n        changed: event => this.inputChangedHandler(event, formElement.id)\n      }, formElement.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 9\n      }, this));\n      const formError = this.state.errorMessage;\n      modal = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: event => this.addNewClientHandler(event, personId),\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"title\",\n            children: this.state.formTitle\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 283,\n            columnNumber: 13\n          }, this), form, /*#__PURE__*/_jsxDEV(Button, {\n            btnType: \"Success\",\n            classes: \"green fullwidth\",\n            children: this.state.formBtn\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 285,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            btnType: \"Dismiss\",\n            classes: \"red fullwidth\",\n            clicked: this.closeModalHandler,\n            children: \"Cancelar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 9\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Clients\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row right\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          classes: \"green\",\n          clicked: event => this.openModalHandler(event),\n          children: \"Nuevo Cliente\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"list-items top\",\n        children: persons\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"count-elements\",\n        style: {\n          textAlign: \"right\"\n        },\n        children: itemsCount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 9\n      }, this), modal]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Clients;","map":{"version":3,"sources":["/var/www/html/rk_practica/src/containers/Clients/Clients.js"],"names":["React","Component","Client","Button","Input","Clients","state","clientes","openModal","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","name","minLength","last_name","phone_number","maxLength","isNumber","formIsValid","formTitle","formBtn","personId","componentDidMount","fetch","then","response","json","data","setState","catch","err","console","log","message","openModalHandler","event","id","formData","title","btn","persons","personIndex","findIndex","person","key","closeModalHandler","checkValidaty","rules","isValid","trim","length","pattern","test","isNaN","addNewClientHandler","preventDefault","url","method","formElement","alert","order","userData","newPerson","headers","body","JSON","stringify","index","push","removeClientHadler","splice","status","inputChangedHandler","controlName","updateControls","target","render","itemsCount","modal","map","bind","formElementsArray","config","form","formError","errorMessage","textAlign"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Client from \"../../components/Client/Client\";\nimport Button from \"../../components/Button/Button\";\nimport Input from \"../../components/Input/Input\";\n\nclass Clients extends Component {\n  state = {\n    clientes: null,\n    openModal: false,\n    controls: {\n      email: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"email\",\n          placeholder: \"Email\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          isEmail: true,\n        },\n        valid: false,\n        touched: false,\n      },\n      name: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"Your First Name\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          minLength: 3,\n        },\n        valid: false,\n        touched: false,\n      },\n      last_name: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"Your Second Name\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          minLength: 3,\n        },\n        valid: false,\n        touched: false,\n      },\n      phone_number: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"number\",\n          placeholder: \"Enter your phone number\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          minLength: 9,\n          maxLength: 9,\n          isNumber: true\n        },\n        valid: false,\n        touched: false,\n      },\n    },\n    formIsValid: false,\n    formTitle: \"Nuevo Cliente\",\n    formBtn: \"Crear Nuevo Cliente\",\n    personId: null\n  };\n\n  componentDidMount = () => {\n    fetch(\"http://localhost:3030/clients\")\n      .then((response) => {\n        return response.json();\n      })\n      .then((data) => {\n        this.setState({ clientes: data });\n      })\n      .catch((err) => {\n        console.log(err.message);\n      });\n  };\n\n  openModalHandler = (event, id) => {\n    let formData = {...this.state.controls}\n    let title = \"Nuevo Cliente\"\n    let btn = \"Crear Nuevo Cliente\"\n    if(!!id){\n      let persons = [ ...this.state.clientes];\n      let personIndex = persons.findIndex((person) => person.id === id);\n      let person = {...persons[personIndex]};\n\n      for(let key in person){\n         if(!!formData[key]){\n          formData[key].value = person[key]\n        }\n      }\n      title = \"Editar: \" + person.name\n      btn = \"Editar\"\n    }else{\n      for(let key in formData){\n        formData[key].value = \"\"\n      }\n    }\n    \n    let openModal = this.state.openModal;\n    this.setState({ \n      openModal: !openModal, \n      controls: formData,\n      formBtn: btn,\n      formTitle: title,\n      personId: id\n    });\n  };\n\n  closeModalHandler = () => {\n    this.setState({ openModal: false });\n  }\n  checkValidaty = ( value, rules ) => {\n    let isValid = true;\n\n    if(rules.required) {\n        isValid = value.trim() !== \"\" && isValid;\n    }\n    if(rules.minLength){\n        isValid = value.length >= rules.minLength && isValid\n    }\n    if(rules.maxLength){\n        isValid = value.length <= rules.maxLength && isValid\n    }\n    if(rules.isEmail){\n        const pattern = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/\n        isValid = pattern.test(value) && isValid\n    }\n    if(rules.isNumber){\n      isValid = !isNaN(rules.isNumber)  && isValid\n    }\n\n    return isValid\n  }\n\n  addNewClientHandler = (event, id) => {\n    event.preventDefault();\n    let formData = [];\n    let url = \"http://localhost:3030/clients\";\n    let method = \"POST\";\n    let formIsValid = true;\n    const controls = {...this.state.controls}\n    if(!!id){\n      url += \"/\" + id\n      method = \"PUT\"\n    }\n    console.log(\"controls: \", controls)\n    for(let formElement in controls){\n      console.log(\"Cont -valid:\", controls[formElement])\n      if(controls[formElement].validation.required && controls[formElement].valid && formIsValid){\n        formIsValid = this.checkValidaty(controls[formElement].value, controls[formElement].validation)\n        formData[formElement] = controls[formElement] \n      }else{\n        formIsValid = false\n        alert(\"Empty camp\")\n      }\n      \n    }\n    if(!formIsValid){\n      return this.setState({formIsValid: formIsValid, controls: controls})\n    }\n    \n    const order = {\n        userData: formData\n    }\n    \n    let persons = [...this.state.clientes];\n\n    let newPerson = {\n      name: order.userData.name.value,\n      last_name:  order.userData.last_name.value,\n      email:  order.userData.email.value,\n      phone_number: order.userData.phone_number.value\n    };\n\n    fetch(url, {\n      method: method,\n      headers: {\n        \"Content-type\": \"application/json; charset=UTF-8\", // Indicates the content\n      },\n      body: JSON.stringify(newPerson),\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        let index = persons.findIndex( person => person.id === data.id)\n        if(index !== -1){\n          persons[index] = data\n        }else{\n          persons.push(data);\n        }\n        this.setState({ clientes: persons,openModal: false });\n      })\n      .catch((err) => console.log(err));\n  };\n\n  removeClientHadler = (id) => {\n    let persons = [...this.state.clientes];\n    let personIndex = persons.findIndex((person) => person.id === id);\n    persons.splice(personIndex, 1);\n\n    fetch(\"http://localhost:3030/clients/\" + id, {\n      method: \"DELETE\",\n    })\n      .then((response) => {\n        response.json();\n        if (response.status === 200) {\n          this.setState({ clientes: persons });\n        }\n      })\n    \n      .catch((err) => console.log(err));\n  };\n  \n  inputChangedHandler = (event, controlName) => {\n    const updateControls = {\n        ...this.state.controls,\n        [controlName]: {\n            ...this.state.controls[controlName],\n            value: event.target.value,\n            valid: this.checkValidaty(event.target.value, this.state.controls[controlName].validation),\n            touched: true\n        }\n    }\n    this.setState({controls: updateControls})\n  }\n  render() {\n    let persons = \"\";\n    let itemsCount = 0;\n    let modal = \"\";\n    let personId = this.state.personId\n    if (this.state.clientes) {\n      itemsCount = \"Total: \" + this.state.clientes.length + \" clientes\";\n      persons = this.state.clientes.map((person, index) => (\n        <Client\n          number={index + 1}\n          key={person.id}\n          name={person.name}\n          last_name={person.last_name}\n          email={person.email}\n          phone={person.phone_number}\n          clickedEdit={(event) =>this.openModalHandler(event, person.id)}\n          clickedRemove={this.removeClientHadler.bind(this, person.id)}\n        />\n      ));\n    }\n\n    if (this.state.openModal) {\n      const formElementsArray = [];\n      for (let key in this.state.controls) {\n        formElementsArray.push({\n          id: key,\n          config: this.state.controls[key],\n        });\n      }\n\n      const form = formElementsArray.map((formElement) => (\n        <Input\n          key={formElement.id}\n          elementType={formElement.config.elementType}\n          elementConfig={formElement.config.elementConfig}\n          value={formElement.config.value}\n          invalid={!formElement.config.valid}\n          shouldValidate={formElement.config.validation}\n          touched={formElement.config.touched}\n          changed={(event) => this.inputChangedHandler(event, formElement.id)}\n        />\n      ));\n      const formError = this.state.errorMessage\n      modal = (\n        <div className=\"modal\">\n          <form onSubmit={(event) => this.addNewClientHandler(event, personId)}>\n            <h4 className=\"title\">{this.state.formTitle}</h4>\n            {form}\n            <Button btnType=\"Success\" classes=\"green fullwidth\">\n              {this.state.formBtn}\n            </Button>\n            <Button btnType=\"Dismiss\" classes=\"red fullwidth\" clicked={this.closeModalHandler}>\n              Cancelar\n            </Button>\n          </form>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"Clients\">\n        <div className=\"row right\">\n          <Button classes=\"green\" clicked={(event) =>this.openModalHandler(event)}>\n            Nuevo Cliente\n          </Button>\n        </div>\n        <div className=\"list-items top\">{persons}</div>\n        <div className=\"count-elements\" style={{ textAlign: \"right\" }}>\n          {itemsCount}\n        </div>\n        {modal}\n      </div>\n    );\n  }\n}\nexport default Clients;\n"]},"metadata":{},"sourceType":"module"}